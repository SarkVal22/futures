import logging
import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import asyncio
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")

# API MEXC –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –ø–∞—Ä
MEXC_FUTURES_API_URL = 'https://contract.mexc.com/api/v1/contract/detail'

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–∞—Ä
known_pairs = set()
registered_chats = set()

async def fetch_futures_pairs():
    """–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –ø–∞—Ä —Å MEXC."""
    try:
        response = requests.get(MEXC_FUTURES_API_URL)
        response.raise_for_status()
        data = response.json()
        if 'data' in data:
            data = data['data']
        pairs = [item['symbol'] for item in data]
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–∞—Ä: {len(pairs)}")
        return pairs
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ MEXC: {e}")
        return []
    except KeyError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á {e}")
        return []

async def check_new_listings():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–≤—ã–µ –ª–∏—Å—Ç–∏–Ω–≥–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    global known_pairs
    pairs = await fetch_futures_pairs()
    if not pairs:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –ª–∏—Å—Ç–∏–Ω–≥–æ–≤.")
        return

    new_pairs = set(pairs) - known_pairs
    if new_pairs:
        for pair in new_pairs:
            message = f"üöÄ –ù–æ–≤–∞—è —Ñ—å—é—á–µ—Ä—Å–Ω–∞—è –ø–∞—Ä–∞ –Ω–∞ MEXC: {pair}"
            logger.info(message)
            for chat_id in registered_chats:
                await application.bot.send_message(chat_id=chat_id, text=message)
        known_pairs.update(new_pairs)

async def periodic_check():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Å—Ç–∏–Ω–≥–æ–≤."""
    while True:
        await check_new_listings()
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    global known_pairs
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç —á–∞—Ç–∞ {update.effective_chat.id}")
    registered_chats.add(update.effective_chat.id)  # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —á–∞—Ç
    await update.message.reply_text("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ª–∏—Å—Ç–∏–Ω–≥–∏ –Ω–æ–≤—ã—Ö —Ñ—å—é—á–µ—Ä—Å–æ–≤ –Ω–∞ MEXC!")
    known_pairs = set(await fetch_futures_pairs())  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–∞—Ä

def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    global application
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    loop = asyncio.get_event_loop()
    loop.create_task(periodic_check())

    logger.info("Bot is running...")
    application.run_polling()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º long polling

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    main()
